// Generated by gir (https://github.com/gtk-rs/gir @ 5433e2582f83)
// from C:\Users\dan\Documents\code\libnice\build\nice (@ ac4bb22ebbfc)
// from C:\vcpkg\installed\x64-windows\share\gir-1.0 (@ 65be7019941e)
// DO NOT EDIT

use crate::{ffi};
#[cfg(feature = "v0_1_15")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
use glib::{bitflags::bitflags,translate::*};

#[cfg(feature = "v0_1_15")]
bitflags! {
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "NiceAgentOption")]
    pub struct AgentOption: u32 {
        #[doc(alias = "NICE_AGENT_OPTION_NONE")]
        const NONE = ffi::NICE_AGENT_OPTION_NONE as _;
        #[doc(alias = "NICE_AGENT_OPTION_REGULAR_NOMINATION")]
        const REGULAR_NOMINATION = ffi::NICE_AGENT_OPTION_REGULAR_NOMINATION as _;
        #[doc(alias = "NICE_AGENT_OPTION_RELIABLE")]
        const RELIABLE = ffi::NICE_AGENT_OPTION_RELIABLE as _;
        #[doc(alias = "NICE_AGENT_OPTION_LITE_MODE")]
        const LITE_MODE = ffi::NICE_AGENT_OPTION_LITE_MODE as _;
        #[doc(alias = "NICE_AGENT_OPTION_ICE_TRICKLE")]
        const ICE_TRICKLE = ffi::NICE_AGENT_OPTION_ICE_TRICKLE as _;
        #[doc(alias = "NICE_AGENT_OPTION_SUPPORT_RENOMINATION")]
        const SUPPORT_RENOMINATION = ffi::NICE_AGENT_OPTION_SUPPORT_RENOMINATION as _;
        #[doc(alias = "NICE_AGENT_OPTION_CONSENT_FRESHNESS")]
        const CONSENT_FRESHNESS = ffi::NICE_AGENT_OPTION_CONSENT_FRESHNESS as _;
        #[doc(alias = "NICE_AGENT_OPTION_BYTESTREAM_TCP")]
        const BYTESTREAM_TCP = ffi::NICE_AGENT_OPTION_BYTESTREAM_TCP as _;
    }
}

#[cfg(feature = "v0_1_15")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
#[doc(hidden)]
impl IntoGlib for AgentOption {
    type GlibType = ffi::NiceAgentOption;

    #[inline]
    fn into_glib(self) -> ffi::NiceAgentOption {
        self.bits()
    }
}

#[cfg(feature = "v0_1_15")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_1_15")))]
#[doc(hidden)]
impl FromGlib<ffi::NiceAgentOption> for AgentOption {
    #[inline]
    unsafe fn from_glib(value: ffi::NiceAgentOption) -> Self {
        Self::from_bits_truncate(value)
    }
}

